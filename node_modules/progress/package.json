{
  "_args": [
    [
      {
        "raw": "progress",
        "scope": null,
        "escapedName": "progress",
        "name": "progress",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/artiumsirchenko/Desktop/coding/learning/school_projects/awesomeScrips/startupmapCrawler/crawler"
    ]
  ],
  "_from": "progress",
  "_hasShrinkwrap": false,
  "_id": "progress@2.0.1",
  "_location": "/progress",
  "_nodeVersion": "8.9.4",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/progress_2.0.1_1539764807268_0.0941383289795259"
  },
  "_npmUser": {
    "name": "turbopope",
    "email": "PapstDonB@Googlemail.com"
  },
  "_npmVersion": "6.4.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "progress",
    "scope": null,
    "escapedName": "progress",
    "name": "progress",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/progress/-/progress-2.0.1.tgz",
  "_shasum": "c9242169342b1c29d275889c95734621b1952e31",
  "_shrinkwrap": null,
  "_spec": "progress",
  "_where": "/Users/artiumsirchenko/Desktop/coding/learning/school_projects/awesomeScrips/startupmapCrawler/crawler",
  "author": {
    "name": "TJ Holowaychuk",
    "email": "tj@vision-media.ca"
  },
  "bugs": {
    "url": "https://github.com/visionmedia/node-progress/issues"
  },
  "contributors": [
    {
      "name": "Christoffer Hallas",
      "email": "christoffer.hallas@gmail.com"
    },
    {
      "name": "Jordan Scales",
      "email": "scalesjordan@gmail.com"
    },
    {
      "name": "Andrew Rhyne",
      "email": "rhyneandrew@gmail.com"
    },
    {
      "name": "Marco Brack",
      "email": "PapstDonB@Googlemail.com"
    }
  ],
  "dependencies": {},
  "description": "Flexible ascii progress bar",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "integrity": "sha512-OE+a6vzqazc+K6LxJrX5UPyKFvGnL5CYmq2jFGNIBWHpc4QyE49/YOumcrpQFJpfejmvRtbJzgO1zPmMCqlbBg==",
    "shasum": "c9242169342b1c29d275889c95734621b1952e31",
    "tarball": "https://registry.npmjs.org/progress/-/progress-2.0.1.tgz",
    "fileCount": 7,
    "unpackedSize": 15418,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbxvJHCRA9TVsSAnZWagAAPssP/10oq00anQynzlXLfmm1\n+pQ4d32+K4a8AoTmVFfahPLnmu97B19/3pH70jPlSc9Np+Fcbh3/e9D/WPHe\ntEgaBt2Ik3r9iVmGh+y7Rkmx6FfY9fCTF9eCYyeHtth2sYZemv2qPnFZx250\nWu3XU0MIA2fWCjBNYb7goP2sR11qqecIAqc8EBU2xcsYJFjDQ2eCZCLSo6gZ\nwbrDcMce0/hUzXD1i6yx9x+wGAc1ni65QjLg4VkC3J3XJX5uKbf3J6tAr+6m\ndO+k+okkZlkLlvfOzo4dMe1trvr0pYKyLfCHLic1d6k73DlleCPuLd+RMwjt\nmoyVsaDdRZqUTEXkB3XP3M9Af1E/aTQLXKm9RPBtnw/3Ay6gvC21fjq7HSQ9\n6+XzH8ZqHg53/UgS1RRiU9t9z2BKk40uNP3WQC4j60MDuI6+aFAVZrkqcFXU\nrQY79xk5kJwl7argfiTyr3s332i+/lOwCjTVc3kYlQEc5czX/wT61m6Vgz26\nNPZD/KJZ6ttH4nYOiV23UC0oN7p2N8jdbKkXpNHJIrZPbULhqG3g8I8CENZl\n0IqjJRxdPQYfeNx9m9Nr241OV7rTZRWojBKg/ZFlshOAstmlKNtQ1Ehpjb9s\n+w/fNre0acyXnUd43oCoPViFJZACQgvJkyHUgJjFamZA05ajGn0iPBKzOhwA\nlCXx\r\n=9Jmf\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">=0.4.0"
  },
  "gitHead": "4951391515bf6fa5e794b59175e6c80b100d9fac",
  "homepage": "https://github.com/visionmedia/node-progress#readme",
  "keywords": [
    "cli",
    "progress"
  ],
  "license": "MIT",
  "main": "./index.js",
  "maintainers": [
    {
      "name": "prezjordan",
      "email": "scalesjordan@gmail.com"
    },
    {
      "name": "thebigredgeek",
      "email": "rhyneandrew@gmail.com"
    },
    {
      "name": "thejameskyle",
      "email": "me@thejameskyle.com"
    },
    {
      "name": "tjholowaychuk",
      "email": "tj@vision-media.ca"
    }
  ],
  "name": "progress",
  "optionalDependencies": {},
  "readme": "Flexible ascii progress bar.\n\n## Installation\n\n```bash\n$ npm install progress\n```\n\n## Usage\n\nFirst we create a `ProgressBar`, giving it a format string\nas well as the `total`, telling the progress bar when it will\nbe considered complete. After that all we need to do is `tick()` appropriately.\n\n```javascript\nvar ProgressBar = require('progress');\n\nvar bar = new ProgressBar(':bar', { total: 10 });\nvar timer = setInterval(function () {\n  bar.tick();\n  if (bar.complete) {\n    console.log('\\ncomplete\\n');\n    clearInterval(timer);\n  }\n}, 100);\n```\n\n### Options\n\nThese are keys in the options object you can pass to the progress bar along with\n`total` as seen in the example above.\n\n- `curr` current completed index\n- `total` total number of ticks to complete\n- `width` the displayed width of the progress bar defaulting to total\n- `stream` the output stream defaulting to stderr\n- `head` head character defaulting to complete character\n- `complete` completion character defaulting to \"=\"\n- `incomplete` incomplete character defaulting to \"-\"\n- `renderThrottle` minimum time between updates in milliseconds defaulting to 16\n- `clear` option to clear the bar on completion defaulting to false\n- `callback` optional function to call when the progress bar completes\n\n### Tokens\n\nThese are tokens you can use in the format of your progress bar.\n\n- `:bar` the progress bar itself\n- `:current` current tick number\n- `:total` total ticks\n- `:elapsed` time elapsed in seconds\n- `:percent` completion percentage\n- `:eta` estimated completion time in seconds\n- `:rate` rate of ticks per second\n\n### Custom Tokens\n\nYou can define custom tokens by adding a `{'name': value}` object parameter to your method (`tick()`, `update()`, etc.) calls.\n\n```javascript\nvar bar = new ProgressBar(':current: :token1 :token2', { total: 3 })\nbar.tick({\n  'token1': \"Hello\",\n  'token2': \"World!\\n\"\n})\nbar.tick(2, {\n  'token1': \"Goodbye\",\n  'token2': \"World!\"\n})\n```\nThe above example would result in the output below.\n\n```\n1: Hello World!\n3: Goodbye World!\n```\n\n## Examples\n\n### Download\n\nIn our download example each tick has a variable influence, so we pass the chunk\nlength which adjusts the progress bar appropriately relative to the total\nlength.\n\n```javascript\nvar ProgressBar = require('progress');\nvar https = require('https');\n\nvar req = https.request({\n  host: 'download.github.com',\n  port: 443,\n  path: '/visionmedia-node-jscoverage-0d4608a.zip'\n});\n\nreq.on('response', function(res){\n  var len = parseInt(res.headers['content-length'], 10);\n\n  console.log();\n  var bar = new ProgressBar('  downloading [:bar] :rate/bps :percent :etas', {\n    complete: '=',\n    incomplete: ' ',\n    width: 20,\n    total: len\n  });\n\n  res.on('data', function (chunk) {\n    bar.tick(chunk.length);\n  });\n\n  res.on('end', function () {\n    console.log('\\n');\n  });\n});\n\nreq.end();\n```\n\nThe above example result in a progress bar like the one below.\n\n```\ndownloading [=====             ] 39/bps 29% 3.7s\n```\n\n### Interrupt\n\nTo display a message during progress bar execution, use `interrupt()`\n```javascript\nvar ProgressBar = require('progress');\n\nvar bar = new ProgressBar(':bar :current/:total', { total: 10 });\nvar timer = setInterval(function () {\n  bar.tick();\n  if (bar.complete) {\n    clearInterval(timer);\n  } else if (bar.curr === 5) {\n      bar.interrupt('this message appears above the progress bar\\ncurrent progress is ' + bar.curr + '/' + bar.total);\n  }\n}, 1000);\n```\n\nYou can see more examples in the `examples` folder.\n\n## License\n\nMIT\n",
  "readmeFilename": "Readme.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/visionmedia/node-progress.git"
  },
  "version": "2.0.1"
}
